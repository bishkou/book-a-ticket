{"version":3,"sources":["../src/index.js"],"names":["updateIfCurrentPlugin","schema","options","strategy","plugin","versionOCCPlugin","timestampOCCPlugin"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;;;AAEA;;;;;;AAMO,SAASA,qBAAT,CAA+BC,MAA/B,EAAuCC,OAAvC,EAAgD;AACrD;AACA,MAAMC,QAAQ,GAAID,OAAO,IAAIA,OAAO,CAACC,QAApB,IAAiC,SAAlD,CAFqD,CAIrD;;AACA,MAAIA,QAAQ,KAAK,SAAjB,EAA4B;AAC1BF,IAAAA,MAAM,CAACG,MAAP,CAAcC,kCAAd;AACD,GAFD,MAEO,IAAIF,QAAQ,KAAK,WAAjB,EAA8B;AACnCF,IAAAA,MAAM,CAACG,MAAP,CAAcE,sCAAd;AACD,GAFM,MAEA;AACL,4BACI,KADJ,EAEI,sEAFJ;AAID;AACF","sourcesContent":["import 'core-js/stable';\nimport 'regenerator-runtime/runtime';\n\nimport assert from 'assert';\nimport {versionOCCPlugin} from './version-occ-plugin';\nimport {timestampOCCPlugin} from './timestamp-occ-plugin';\n\n/**\n * Implement optimistic concurrency control on a Mongoose schema.\n *\n * @param {mongoose.Schema} schema - A Mongoose schema to be plugged into.\n * @param {object} options - A Mongoose schema to be plugged into.\n */\nexport function updateIfCurrentPlugin(schema, options) {\n  // Default to using the version field for concurrency control\n  const strategy = (options && options.strategy) || 'version';\n\n  // Apply plugin based on strategy\n  if (strategy === 'version') {\n    schema.plugin(versionOCCPlugin);\n  } else if (strategy === 'timestamp') {\n    schema.plugin(timestampOCCPlugin);\n  } else {\n    assert(\n        false,\n        'concurrency control strategy must be one of \"version\" or \"timestamp\"'\n    );\n  }\n}\n"],"file":"index.js"}